/* automatically generated by rust-bindgen 0.63.0 */

pub const IPC_MAGIC: u32 = 335880193;
pub const SWUPDATE_API_VERSION: u32 = 1;
pub const RECOVERY_STATUS_IDLE: RECOVERY_STATUS = 0;
pub const RECOVERY_STATUS_START: RECOVERY_STATUS = 1;
pub const RECOVERY_STATUS_RUN: RECOVERY_STATUS = 2;
pub const RECOVERY_STATUS_SUCCESS: RECOVERY_STATUS = 3;
pub const RECOVERY_STATUS_FAILURE: RECOVERY_STATUS = 4;
pub const RECOVERY_STATUS_DOWNLOAD: RECOVERY_STATUS = 5;
pub const RECOVERY_STATUS_DONE: RECOVERY_STATUS = 6;
pub const RECOVERY_STATUS_SUBPROCESS: RECOVERY_STATUS = 7;
pub const RECOVERY_STATUS_PROGRESS: RECOVERY_STATUS = 8;
pub type RECOVERY_STATUS = ::std::os::raw::c_uint;
pub const sourcetype_SOURCE_UNKNOWN: sourcetype = 0;
pub const sourcetype_SOURCE_WEBSERVER: sourcetype = 1;
pub const sourcetype_SOURCE_SURICATTA: sourcetype = 2;
pub const sourcetype_SOURCE_DOWNLOADER: sourcetype = 3;
pub const sourcetype_SOURCE_LOCAL: sourcetype = 4;
pub const sourcetype_SOURCE_CHUNKS_DOWNLOADER: sourcetype = 5;
pub type sourcetype = ::std::os::raw::c_uint;
extern "C" {
    pub static mut SOCKET_PROGRESS_PATH: *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct progress_msg {
    pub magic: ::std::os::raw::c_uint,
    pub status: RECOVERY_STATUS,
    pub dwl_percent: ::std::os::raw::c_uint,
    pub dwl_bytes: ::std::os::raw::c_ulonglong,
    pub nsteps: ::std::os::raw::c_uint,
    pub cur_step: ::std::os::raw::c_uint,
    pub cur_percent: ::std::os::raw::c_uint,
    pub cur_image: [::std::os::raw::c_char; 256usize],
    pub hnd_name: [::std::os::raw::c_char; 64usize],
    pub source: sourcetype,
    pub infolen: ::std::os::raw::c_uint,
    pub info: [::std::os::raw::c_char; 2048usize],
}
#[test]
fn bindgen_test_layout_progress_msg() {
    const UNINIT: ::std::mem::MaybeUninit<progress_msg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<progress_msg>(),
        2416usize,
        concat!("Size of: ", stringify!(progress_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<progress_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(progress_msg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwl_percent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(dwl_percent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwl_bytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(dwl_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsteps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(nsteps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_step) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(cur_step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_percent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(cur_percent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_image) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(cur_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hnd_name) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(hnd_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infolen) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(infolen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(info)
        )
    );
}
extern "C" {
    pub fn get_prog_socket() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn progress_ipc_connect(reconnect: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn progress_ipc_connect_with_path(
        socketpath: *const ::std::os::raw::c_char,
        reconnect: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn progress_ipc_receive(
        connfd: *mut ::std::os::raw::c_int,
        msg: *mut progress_msg,
    ) -> ::std::os::raw::c_int;
}
pub const msgtype_REQ_INSTALL: msgtype = 0;
pub const msgtype_ACK: msgtype = 1;
pub const msgtype_NACK: msgtype = 2;
pub const msgtype_GET_STATUS: msgtype = 3;
pub const msgtype_POST_UPDATE: msgtype = 4;
pub const msgtype_SWUPDATE_SUBPROCESS: msgtype = 5;
pub const msgtype_SET_AES_KEY: msgtype = 6;
pub const msgtype_SET_UPDATE_STATE: msgtype = 7;
pub const msgtype_GET_UPDATE_STATE: msgtype = 8;
pub const msgtype_REQ_INSTALL_EXT: msgtype = 9;
pub const msgtype_SET_VERSIONS_RANGE: msgtype = 10;
pub const msgtype_NOTIFY_STREAM: msgtype = 11;
pub type msgtype = ::std::os::raw::c_uint;
pub const CMD_ACTIVATION: _bindgen_ty_1 = 0;
pub const CMD_CONFIG: _bindgen_ty_1 = 1;
pub const CMD_ENABLE: _bindgen_ty_1 = 2;
pub const CMD_GET_STATUS: _bindgen_ty_1 = 3;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const run_type_RUN_DEFAULT: run_type = 0;
pub const run_type_RUN_DRYRUN: run_type = 1;
pub const run_type_RUN_INSTALL: run_type = 2;
pub type run_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swupdate_request {
    pub apiversion: ::std::os::raw::c_uint,
    pub source: sourcetype,
    pub dry_run: run_type,
    pub len: usize,
    pub info: [::std::os::raw::c_char; 512usize],
    pub software_set: [::std::os::raw::c_char; 256usize],
    pub running_mode: [::std::os::raw::c_char; 256usize],
    pub disable_store_swu: bool,
}
#[test]
fn bindgen_test_layout_swupdate_request() {
    const UNINIT: ::std::mem::MaybeUninit<swupdate_request> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<swupdate_request>(),
        1056usize,
        concat!("Size of: ", stringify!(swupdate_request))
    );
    assert_eq!(
        ::std::mem::align_of::<swupdate_request>(),
        8usize,
        concat!("Alignment of ", stringify!(swupdate_request))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apiversion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(swupdate_request),
            "::",
            stringify!(apiversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(swupdate_request),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dry_run) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(swupdate_request),
            "::",
            stringify!(dry_run)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(swupdate_request),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(swupdate_request),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).software_set) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(swupdate_request),
            "::",
            stringify!(software_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).running_mode) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(swupdate_request),
            "::",
            stringify!(running_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable_store_swu) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(swupdate_request),
            "::",
            stringify!(disable_store_swu)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union msgdata {
    pub msg: [::std::os::raw::c_char; 128usize],
    pub status: msgdata__bindgen_ty_1,
    pub notify: msgdata__bindgen_ty_2,
    pub instmsg: msgdata__bindgen_ty_3,
    pub procmsg: msgdata__bindgen_ty_4,
    pub aeskeymsg: msgdata__bindgen_ty_5,
    pub versions: msgdata__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgdata__bindgen_ty_1 {
    pub current: ::std::os::raw::c_int,
    pub last_result: ::std::os::raw::c_int,
    pub error: ::std::os::raw::c_int,
    pub desc: [::std::os::raw::c_char; 2048usize],
}
#[test]
fn bindgen_test_layout_msgdata__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<msgdata__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msgdata__bindgen_ty_1>(),
        2060usize,
        concat!("Size of: ", stringify!(msgdata__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<msgdata__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(msgdata__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_1),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_result) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_1),
            "::",
            stringify!(last_result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_1),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_1),
            "::",
            stringify!(desc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgdata__bindgen_ty_2 {
    pub status: ::std::os::raw::c_int,
    pub error: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub msg: [::std::os::raw::c_char; 2048usize],
}
#[test]
fn bindgen_test_layout_msgdata__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<msgdata__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msgdata__bindgen_ty_2>(),
        2060usize,
        concat!("Size of: ", stringify!(msgdata__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<msgdata__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(msgdata__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_2),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_2),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_2),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_2),
            "::",
            stringify!(msg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgdata__bindgen_ty_3 {
    pub req: swupdate_request,
    pub len: ::std::os::raw::c_uint,
    pub buf: [::std::os::raw::c_char; 2048usize],
}
#[test]
fn bindgen_test_layout_msgdata__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<msgdata__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msgdata__bindgen_ty_3>(),
        3112usize,
        concat!("Size of: ", stringify!(msgdata__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<msgdata__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(msgdata__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_3),
            "::",
            stringify!(req)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_3),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        1060usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_3),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgdata__bindgen_ty_4 {
    pub source: sourcetype,
    pub cmd: ::std::os::raw::c_int,
    pub timeout: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_uint,
    pub buf: [::std::os::raw::c_char; 2048usize],
}
#[test]
fn bindgen_test_layout_msgdata__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<msgdata__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msgdata__bindgen_ty_4>(),
        2064usize,
        concat!("Size of: ", stringify!(msgdata__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<msgdata__bindgen_ty_4>(),
        4usize,
        concat!("Alignment of ", stringify!(msgdata__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_4),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_4),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_4),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_4),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_4),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgdata__bindgen_ty_5 {
    pub key_ascii: [::std::os::raw::c_char; 65usize],
    pub ivt_ascii: [::std::os::raw::c_char; 33usize],
}
#[test]
fn bindgen_test_layout_msgdata__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<msgdata__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msgdata__bindgen_ty_5>(),
        98usize,
        concat!("Size of: ", stringify!(msgdata__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<msgdata__bindgen_ty_5>(),
        1usize,
        concat!("Alignment of ", stringify!(msgdata__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_ascii) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_5),
            "::",
            stringify!(key_ascii)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ivt_ascii) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_5),
            "::",
            stringify!(ivt_ascii)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgdata__bindgen_ty_6 {
    pub minimum_version: [::std::os::raw::c_char; 256usize],
    pub maximum_version: [::std::os::raw::c_char; 256usize],
    pub current_version: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_msgdata__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<msgdata__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msgdata__bindgen_ty_6>(),
        768usize,
        concat!("Size of: ", stringify!(msgdata__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<msgdata__bindgen_ty_6>(),
        1usize,
        concat!("Alignment of ", stringify!(msgdata__bindgen_ty_6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_6),
            "::",
            stringify!(minimum_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum_version) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_6),
            "::",
            stringify!(maximum_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_version) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata__bindgen_ty_6),
            "::",
            stringify!(current_version)
        )
    );
}
#[test]
fn bindgen_test_layout_msgdata() {
    const UNINIT: ::std::mem::MaybeUninit<msgdata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msgdata>(),
        3112usize,
        concat!("Size of: ", stringify!(msgdata))
    );
    assert_eq!(
        ::std::mem::align_of::<msgdata>(),
        8usize,
        concat!("Alignment of ", stringify!(msgdata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notify) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata),
            "::",
            stringify!(notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instmsg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata),
            "::",
            stringify!(instmsg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).procmsg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata),
            "::",
            stringify!(procmsg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aeskeymsg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata),
            "::",
            stringify!(aeskeymsg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).versions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgdata),
            "::",
            stringify!(versions)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipc_message {
    pub magic: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub data: msgdata,
}
#[test]
fn bindgen_test_layout_ipc_message() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_message> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_message>(),
        3120usize,
        concat!("Size of: ", stringify!(ipc_message))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_message>(),
        8usize,
        concat!("Alignment of ", stringify!(ipc_message))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_message),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_message),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_message),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    pub fn get_ctrl_socket() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipc_inst_start() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipc_inst_start_ext(
        priv_: *mut ::std::os::raw::c_void,
        size: isize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipc_send_data(
        connfd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipc_end(connfd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ipc_get_status(msg: *mut ipc_message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipc_get_status_timeout(
        msg: *mut ipc_message,
        timeout_ms: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipc_notify_connect() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipc_notify_receive(
        connfd: *mut ::std::os::raw::c_int,
        msg: *mut ipc_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipc_postupdate(msg: *mut ipc_message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipc_send_cmd(msg: *mut ipc_message) -> ::std::os::raw::c_int;
}
pub type writedata = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut *mut ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type getstatus =
    ::std::option::Option<unsafe extern "C" fn(msg: *mut ipc_message) -> ::std::os::raw::c_int>;
pub type terminated =
    ::std::option::Option<unsafe extern "C" fn(status: RECOVERY_STATUS) -> ::std::os::raw::c_int>;
extern "C" {
    pub fn ipc_wait_for_complete(callback: getstatus) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swupdate_prepare_req(req: *mut swupdate_request);
}
extern "C" {
    pub fn swupdate_image_write(
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swupdate_async_start(
        wr_func: writedata,
        status_func: getstatus,
        end_func: terminated,
        priv_: *mut ::std::os::raw::c_void,
        size: isize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swupdate_set_aes(
        key: *mut ::std::os::raw::c_char,
        ivt: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swupdate_set_version_range(
        minversion: *const ::std::os::raw::c_char,
        maxversion: *const ::std::os::raw::c_char,
        currentversion: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
