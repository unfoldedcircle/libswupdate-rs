/* automatically generated by rust-bindgen 0.63.0 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const PRINFOSIZE: u32 = 2048;
pub const RECOVERY_STATUS_IDLE: RECOVERY_STATUS = 0;
pub const RECOVERY_STATUS_START: RECOVERY_STATUS = 1;
pub const RECOVERY_STATUS_RUN: RECOVERY_STATUS = 2;
pub const RECOVERY_STATUS_SUCCESS: RECOVERY_STATUS = 3;
pub const RECOVERY_STATUS_FAILURE: RECOVERY_STATUS = 4;
pub const RECOVERY_STATUS_DOWNLOAD: RECOVERY_STATUS = 5;
pub const RECOVERY_STATUS_DONE: RECOVERY_STATUS = 6;
pub const RECOVERY_STATUS_SUBPROCESS: RECOVERY_STATUS = 7;
pub const RECOVERY_STATUS_PROGRESS: RECOVERY_STATUS = 8;
pub type RECOVERY_STATUS = ::std::os::raw::c_uint;
pub const sourcetype_SOURCE_UNKNOWN: sourcetype = 0;
pub const sourcetype_SOURCE_WEBSERVER: sourcetype = 1;
pub const sourcetype_SOURCE_SURICATTA: sourcetype = 2;
pub const sourcetype_SOURCE_DOWNLOADER: sourcetype = 3;
pub const sourcetype_SOURCE_LOCAL: sourcetype = 4;
pub const sourcetype_SOURCE_CHUNKS_DOWNLOADER: sourcetype = 5;
pub type sourcetype = ::std::os::raw::c_uint;
extern "C" {
    pub static mut SOCKET_PROGRESS_PATH: *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct progress_msg {
    pub magic: ::std::os::raw::c_uint,
    pub status: RECOVERY_STATUS,
    pub dwl_percent: ::std::os::raw::c_uint,
    pub dwl_bytes: ::std::os::raw::c_ulonglong,
    pub nsteps: ::std::os::raw::c_uint,
    pub cur_step: ::std::os::raw::c_uint,
    pub cur_percent: ::std::os::raw::c_uint,
    pub cur_image: [::std::os::raw::c_char; 256usize],
    pub hnd_name: [::std::os::raw::c_char; 64usize],
    pub source: sourcetype,
    pub infolen: ::std::os::raw::c_uint,
    pub info: [::std::os::raw::c_char; 2048usize],
}
#[test]
fn bindgen_test_layout_progress_msg() {
    const UNINIT: ::std::mem::MaybeUninit<progress_msg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<progress_msg>(),
        2416usize,
        concat!("Size of: ", stringify!(progress_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<progress_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(progress_msg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwl_percent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(dwl_percent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwl_bytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(dwl_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsteps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(nsteps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_step) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(cur_step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_percent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(cur_percent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_image) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(cur_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hnd_name) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(hnd_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infolen) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(infolen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(progress_msg),
            "::",
            stringify!(info)
        )
    );
}
extern "C" {
    pub fn get_prog_socket() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn progress_ipc_connect(reconnect: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn progress_ipc_connect_with_path(
        socketpath: *const ::std::os::raw::c_char,
        reconnect: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn progress_ipc_receive(
        connfd: *mut ::std::os::raw::c_int,
        msg: *mut progress_msg,
    ) -> ::std::os::raw::c_int;
}
