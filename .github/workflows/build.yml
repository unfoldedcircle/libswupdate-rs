name: Rust

on:
  push:
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/src/**'
      - '**/build.rs'
      - '.github/**/*.yml'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  DEBUG_OUTPUT: "true"
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Run rustfmt
        run: cargo fmt --all -- --check

  test:
    name: Test and clippy
    runs-on: ubuntu-latest
    steps:
      - name: Install required libraries
        run: |
          sudo apt-get update
          sudo apt-get install libswupdate-dev -y
        shell: bash

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - run: cargo test

      - name: Run clippy
        run: cargo clippy -- -D warnings

  build:
    name: Build release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Install required libraries
        run: |
          sudo apt-get update
          sudo apt-get install libswupdate-dev -y
        shell: bash

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # History of 200 should be more than enough to calculate commit count since last release tag.
          fetch-depth: 200
      - name: Fetch all tags to determine version
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          APP_VERSION=$(git describe --match "v[0-9]*" --tags HEAD --always)
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.APP_NAME }}-$APP_VERSION-${{ env.LINUX_ARTIFACT_SUFFIX }}" >> $GITHUB_ENV

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Release build
        shell: bash
        run: cargo build --release

  release:
    name: GitHub release
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'tags/v')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Create Pre-Release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "!contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"

      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
